name: Maven release

on:
  push:
    branches: master

jobs:
  create-staging:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      staging-repo-id: ${{ steps.open-staging.outputs.staging-repo-id }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Extract version
        id: version
        run: |
          mvn_version=$(grep -oP '<revision>\K([^<]*)' pom.xml | head -1)
          echo "::set-output name=version::$mvn_version"
      - name: Add Maven credentials
        run: |
          echo '<settings>
                  `<servers>
                      <server>
                          <id>ossrh</id>
                          <username>${{ secrets.nexus_username }}</username>
                          <password>${{ secrets.nexus_password }}</password>
                      </server>
                  </servers>`
                </settings>' > ~/.m2/settings.xml
      - name: Create staging repository
        id: open-staging
        run: |
          version=${{ steps.version.outputs.version }}
          if [[ $version == *"-SNAPSHOT" ]]; then
            nexus_staging_repo=""
            echo "Snapshot version"
          else
            mvn nexus-staging:rc-list
            nexus_staging_repo=$(mvn nexus-staging:rc-open | grep -oP 'com\w+-\d+')
            if [[ -z $nexus_staging_repo ]]; then
              echo "Nexus staging repo is not defined"
              exit 1
            fi
            echo "Staging repository: $nexus_staging_repo"
          fi
          echo "::set-output name=staging-repo-id::$nexus_staging_repo"

  build-native:
    needs: create-staging
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86, x86_64, aarch64]
        include:
          - os: ubuntu-latest
            osname: linux
          - os: macos-latest
            osname: darwin
          - os: windows-latest
            osname: win32
        exclude:
          - os: macos-latest
            arch: x86
          - os: macos-latest
            arch: aarch64
          - os: windows-latest
            arch: aarch64
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - run: |
          git submodule init
          git submodule update
      - if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get install -y gcc-multilib g++-multilib
      - name: Prepare linux x86
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.arch == 'x86' }}
        run: |
          echo 'set_target_properties(snappy PROPERTIES COMPILE_FLAGS "-m32" LINK_FLAGS "-m32")' >> vendor/snappy/CMakeLists.txt
          echo 'set_target_properties(leveldb PROPERTIES COMPILE_FLAGS "-m32" LINK_FLAGS "-m32")' >> vendor/leveldb/CMakeLists.txt
          echo 'set_target_properties(leveldbutil PROPERTIES COMPILE_FLAGS "-m32" LINK_FLAGS "-m32")' >> vendor/leveldb/CMakeLists.txt
      - uses: numworks/setup-msys2@v1
        if: ${{ matrix.os == 'windows-latest' }}
      - name: Prepare windows x86
        if: ${{ matrix.os == 'windows-latest' && matrix.arch == 'x86' }}
        run: |
          echo 'set_target_properties(snappy PROPERTIES CMAKE_GENERATOR_PLATFORM Win32)' >> vendor/snappy/CMakeLists.txt
          echo 'set_target_properties(leveldb PROPERTIES CMAKE_GENERATOR_PLATFORM Win32)' >> vendor/leveldb/CMakeLists.txt
          echo 'set_target_properties(leveldbutil PROPERTIES CMAKE_GENERATOR_PLATFORM Win32)' >> vendor/leveldb/CMakeLists.txt
      - name: Prepare linux arm64
        if: ${{ matrix.arch == 'aarch64' }}
        run: |
          echo "set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)" >> vendor/snappy/CMakeLists.txt
          echo "set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)" >> vendor/snappy/CMakeLists.txt
          echo "set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)" >> vendor/leveldb/CMakeLists.txt
          echo "set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)" >> vendor/leveldb/CMakeLists.txt
          sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      - name: Run native compilation
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          CUSTOM_ARCH=${{ matrix.arch }} ./bin/build_leveldb.sh
      - name: Run msys2 compilation
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          set MSYSTEM=MINGW64
          msys2do pacman -S --noconfirm base-devel git mingw-w64-x86_64-cmake mingw-w64-x86_64-toolchain
          msys2do CUSTOM_ARCH=${{ matrix.arch }} bin/build_leveldb.sh
      - name: Release MacOS package
        if: ${{ matrix.os == 'macos-latest' }}
        uses: samuelmeuli/action-maven-publish@v1.4.0
        with:
          maven_goals_phases: install deploy
          maven_args: -pl leveldb-jna-native -DstagingRepositoryId=${{needs.create-staging.outputs.staging-repo-id}}
          gpg_private_key: ${{ secrets.gpg_private_key }}
          gpg_passphrase: ${{ secrets.gpg_passphrase }}
          nexus_username: ${{ secrets.nexus_username }}
          nexus_password: ${{ secrets.nexus_password }}
      - name: Release native package
        if: ${{ matrix.os != 'macos-latest' }}
        uses: samuelmeuli/action-maven-publish@v1.4.0
        with:
          maven_goals_phases: install deploy
          maven_args: -pl leveldb-jna-native -DstagingRepositoryId=${{needs.create-staging.outputs.staging-repo-id}} -Dplatform.classifier=${{matrix.osname}}-${{matrix.arch}}
          gpg_private_key: ${{ secrets.gpg_private_key }}
          gpg_passphrase: ${{ secrets.gpg_passphrase }}
          nexus_username: ${{ secrets.nexus_username }}
          nexus_password: ${{ secrets.nexus_password }}
      - name: Release core package
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.arch == 'x86_64' }}
        uses: samuelmeuli/action-maven-publish@v1.4.0
        with:
          maven_goals_phases: test deploy
          maven_args: -pl leveldb-jna-core -DstagingRepositoryId=${{needs.create-staging.outputs.staging-repo-id}}
          gpg_private_key: ${{ secrets.gpg_private_key }}
          gpg_passphrase: ${{ secrets.gpg_passphrase }}
          nexus_username: ${{ secrets.nexus_username }}
          nexus_password: ${{ secrets.nexus_password }}
  build-core:
    runs-on: ubuntu-latest
    needs: [create-staging, build-native]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Release core package
        run: |
          nexus_staging_repo="${{ needs.create-staging.outputs.staging-repo-id }}"
          mvn clean test deploy -pl leveldb-jna-core -DstagingRepositoryId=$nexus_staging_repo || { (>&2 echo 'Maven deploy failed') ; exit 1; }
          if [[ -n $nexus_staging_repo ]]; then
            mvn nexus-staging:drop -DstagingRepositoryId=$nexus_staging_repo
          fi
      - name: Drop repository
        if: ${{ !contains(needs.create-staging.outputs.version, 'SNAPSHOT') }}
        uses: samuelmeuli/action-maven-publish@v1.4.0
        with:
          maven_goals_phases: nexus-staging:drop
          maven_args: -DstagingRepositoryId=${{needs.create-staging.outputs.staging-repo-id}}
          gpg_private_key: ${{ secrets.gpg_private_key }}
          gpg_passphrase: ${{ secrets.gpg_passphrase }}
          nexus_username: ${{ secrets.nexus_username }}
          nexus_password: ${{ secrets.nexus_password }}
